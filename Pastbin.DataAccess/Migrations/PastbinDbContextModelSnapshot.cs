// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Pastbin.DataAccess;

#nullable disable

namespace Pastbin.DataAccess.Migrations
{
    [DbContext(typeof(PastbinDbContext))]
    partial class PastbinDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Pastbin.DataAccess.Entites.ImageEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("AddedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<TimeOnly>("UrlLifeCycle")
                        .HasColumnType("time without time zone");

                    b.HasKey("Id");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("Pastbin.DataAccess.Entites.PostEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("uuid");

                    b.Property<string>("Header")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("ImageId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TextBlockId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ImageId")
                        .IsUnique();

                    b.HasIndex("TextBlockId")
                        .IsUnique();

                    b.ToTable("Posts");
                });

            modelBuilder.Entity("Pastbin.DataAccess.Entites.TextBlockEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("AddedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("TextFileName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<TimeOnly>("UrlLifeCycle")
                        .HasColumnType("time without time zone");

                    b.HasKey("Id");

                    b.ToTable("TextBlocks");
                });

            modelBuilder.Entity("Pastbin.DataAccess.Entites.UserEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Pastbin.DataAccess.Entites.PostEntity", b =>
                {
                    b.HasOne("Pastbin.DataAccess.Entites.UserEntity", "Author")
                        .WithMany("Posts")
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Pastbin.DataAccess.Entites.ImageEntity", "Image")
                        .WithOne("Post")
                        .HasForeignKey("Pastbin.DataAccess.Entites.PostEntity", "ImageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Pastbin.DataAccess.Entites.TextBlockEntity", "Text")
                        .WithOne("Post")
                        .HasForeignKey("Pastbin.DataAccess.Entites.PostEntity", "TextBlockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Image");

                    b.Navigation("Text");
                });

            modelBuilder.Entity("Pastbin.DataAccess.Entites.ImageEntity", b =>
                {
                    b.Navigation("Post")
                        .IsRequired();
                });

            modelBuilder.Entity("Pastbin.DataAccess.Entites.TextBlockEntity", b =>
                {
                    b.Navigation("Post")
                        .IsRequired();
                });

            modelBuilder.Entity("Pastbin.DataAccess.Entites.UserEntity", b =>
                {
                    b.Navigation("Posts");
                });
#pragma warning restore 612, 618
        }
    }
}
